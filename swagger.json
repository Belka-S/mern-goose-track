{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.1",
    "title": "UpperCode project",
    "discription": "Best documentation of best developer team"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "http://localhost:8080/api" }],
  "tags": [
    { "name": "Users", "description": "Users endpoints" },
    { "name": "Reviews", "description": "Reviews endpoints" },
    { "name": "Tasks", "description": "Tasks endpoints" }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/RegistrationRequest" } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operations",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegistrationResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "409": {
            "description": "Provided email already exists"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Logs user into the system",
        "parameters": [],
        "requestBody": {
          "description": "Object for login user in system",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/LoginRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operations",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegistrationResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Unauthorised"
          },
          "409": {
            "description": "Provided email already exists"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "Logout user into the system",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operations",
            "content": {
              "application/json": { "type": "string", "example": "Logged out" }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get info of current user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operations",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetCurrentUserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Deleting current user with all his data",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "User user@email.com deleted!, tasks deleted"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/verify": {
      "post": {
        "tags": ["Users"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/VerifyEmailRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operations",
            "content": {
              "application/json": {
                "type": "string",
                "example": "Email user@mail.com verified successfully."
              }
            }
          },
          "400": {
            "description": "Email already verified"
          },
          "401": {
            "description": "Unauthorised"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/profile": {
      "tags": ["Users"],
      "summary": "Updates email, password, or avatar of the user",
      "parameters": [],
      "security": [{ "Bearer": [] }],
      "requestBody": {
        "description": "Object for update user's profile",
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/UpdateProfileRequest" }
          }
        }
      }
    },
    "/tasks/": {
      "tags": ["Tasks"],
      "summary": "Get all user's tasks",
      "parameters": [],
      "security": [{ "Bearer": [] }]
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": { "type": "string", "description": "User's name", "example": "Name" },
          "password": { "type": "string", "description": "User's password", "example": "qwerty" },
          "email": { "type": "string", "description": "User's email", "format": "email" }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "User's name", "example": "Name" },
          "email": { "type": "string", "description": "User's email", "format": "email" },
          "phone": { "type": "string", "description": "User's phone", "example": "Phone" },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "Birthday"
          },
          "avatarUrl": {
            "type": "string",
            "description": "User's avatar",
            "example": "www.avatar.com/avatar/12345678"
          },
          "_id": {
            "type": "string",
            "description": "User's ID",
            "example": "12345678"
          },
          "verifiedEmail": {
            "type": "boolean",
            "description": "User's email is verifyed",
            "example": "www.avatar.com/avatar/12345678"
          }
        }
      },
      "CurrentUser": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "User's name", "example": "Name" },
          "email": { "type": "string", "description": "User's email", "format": "email" },
          "phone": { "type": "string", "description": "User's phone", "example": "Phone" },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "Birthday"
          },
          "avatarUrl": {
            "type": "string",
            "description": "User's avatar",
            "example": "www.avatar.com/avatar/12345678"
          },
          "_id": {
            "type": "string",
            "description": "User's ID",
            "example": "12345678"
          },
          "verifiedEmail": {
            "type": "boolean",
            "description": "User's email is verifyed",
            "example": "www.avatar.com/avatar/12345678"
          },
          "skype": {
            "type": "string",
            "description": "User's skype account",
            "example": "live:user"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "password": { "type": "string", "description": "User's password", "example": "qwerty" },
          "email": { "type": "string", "description": "User's email", "format": "email" }
        }
      },
      "UpdateProfileRequest": {
        "type": "string",
        "required": ["email", "name"],
        "properties": {
          "name": { "type": "string", "description": "User's name", "format": "User" },
          "email": { "type": "string", "description": "User's email", "format": "email" },
          "password": { "type": "string", "description": "User's password", "example": "qwerty" },
          "phone": { "type": "string", "description": "User's phone", "example": "Phone" },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "Birthday"
          },
          "skype": {
            "type": "string",
            "description": "User's skype account",
            "example": "live:user"
          },
          "verificationCode": {
            "type": "boolean",
            "description": "User's verificationCode",
            "example": "qwertyuiop"
          }
        }
      },
      "VerifyEmailRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Verification emailr password",
            "example": "qwerty"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": { "type": "string", "description": "User's token", "example": "12345678901112" },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "GetCurrentUserResponse": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/CurrentUser" }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
